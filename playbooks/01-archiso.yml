---
- name: Install Arch Linux from archiso
  hosts: all
  tags: archiso

  vars:
    reboot: false
    iknowwhatiamdoing: false
    vfat_mount_opts: rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro
    btrfs_mount_opts: rw,noatime,compress=zstd:1,space_cache=v2

  roles:
    - { role: meta, tags: always, vars: { meta_end_host_if_archiso: false } }

  tasks:
    - ansible.builtin.assert:
        that:
          - 'dev is defined and dev | length > 0'
          - 'timezone is defined and timezone | length > 0'
          - 'locales is defined and locales | length > 0'
          - 'hostname is defined and hostname | length > 0'
          - 'user is defined and user | length > 0'
          - 'user_password is defined and user | length > 0'
        fail_msg: Required variable undefined or empty
      tags: [partition, timezone, locale, hostname, user]

    - ansible.builtin.assert:
        that: 'dev in ansible_devices'
        fail_msg: Install device not detected
      tags: [partition, mount]

    - name: Ping archlinux.org
      ansible.builtin.command:
        cmd: ping -c2 archlinux.org
      tags: [partition, btrfs, pacstrap]

    - name: Setup pacman
      ansible.builtin.import_role:
        name: pacman
      vars:
        pacman_reflector: true
      tags: pacman

    - name: Read device
      community.general.parted:
        device: "/dev/{{ dev }}"
      register: dev_parted
      tags: partition

    - ansible.builtin.debug:
        var: dev_parted
      tags: partition

    - name: Prompt before partitioning
      ansible.builtin.pause:
        prompt: |
          Device to install Arch Linux on: /dev/{{ dev }}
          ALL DATA WILL BE WIPED ON THE DEVICE!!!
          Press Enter to continue...
      when: not iknowwhatiamdoing
      tags: partition

    - name: Ensure /mnt is unmounted
      ansible.builtin.command:
        cmd: umount -R /mnt
      when: ansible_mounts | selectattr('mount', 'equalto', '/mnt') | list | length > 0
      tags: [partition, mount]

    - name: Remove all partitions from disk
      community.general.parted:
        device: "/dev/{{ dev }}"
        number: "{{ item.num }}"
        state: absent
      loop: "{{ dev_parted.partitions }}"
      tags: partition

    - name: Create an ESP partition
      community.general.parted:
        device: "/dev/{{ dev }}"
        number: 1
        state: present
        part_end: 1GiB
        label: gpt
        flags: [esp]
      register: dev_esp
      tags: partition

    - name: Create a root btrfs partition
      community.general.parted:
        device: "/dev/{{ dev }}"
        number: 2
        state: present
        part_start: 1GiB
        label: gpt
      register: dev_main
      tags: partition

    - name: Get partitions
      ansible.builtin.shell:
        cmd: |
          set -o pipefail #
          lsblk -rno NAME,TYPE | awk -v disk="{{ dev }}" '$2=="part" && $1 ~ disk {print "/dev/" $1}' | sort -V
      register: lsblk_cmd
      tags: [partition, mount]

    - name: Store partitions
      ansible.builtin.set_fact: # must be in the exact order!
        esp_part_file: "{{ lsblk_cmd.stdout_lines[0] }}"
        root_part_file: "{{ lsblk_cmd.stdout_lines[1] }}"
      tags: [partition, mount]

    - ansible.builtin.assert:
        that:
          - esp_part_file[-1] == '1'
          - root_part_file[-1] == '2'
      tags: [partition, mount]

    - name: Format EFI partition to fat32
      community.general.filesystem:
        dev: "{{ esp_part_file }}"
        state: present
        fstype: vfat
        opts: -n EFI -F 32
        force: true
      tags: partition

    - name: Format root partition to btrfs
      community.general.filesystem:
        dev: "{{ root_part_file }}"
        state: present
        fstype: btrfs
        opts: -L root
        force: true
      tags: partition

    - name: Mount root partition
      ansible.posix.mount:
        path: /mnt
        src: "{{ root_part_file }}"
        state: ephemeral
        fstype: btrfs
        opts: "{{ btrfs_mount_opts }}"
      tags: btrfs

    - name: Create btrfs subvols
      community.general.btrfs_subvolume:
        name: "{{ item }}"
        state: present
        automount: false
        default: false
        filesystem_device: "{{ root_part_file }}"
      loop:
        - '@'
        - '@home'
        - '@log'
        - '@pkg'
        - '@snapshots'
      tags: btrfs

    - name: Unmount root partition
      ansible.posix.mount:
        path: /mnt
        state: unmounted
      tags: btrfs

    - name: Mount root subvolume @
      ansible.posix.mount:
        path: /mnt
        src: "{{ root_part_file }}"
        state: ephemeral
        fstype: btrfs
        opts: "{{ btrfs_mount_opts }},subvol=@"
      tags: [btrfs, mount]

    - name: Create mountpoints
      ansible.builtin.file:
        path: "/mnt/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - boot
        - home
        - var/cache/pacman/pkg
        - var/log
        - .snapshots
      tags: btrfs

    - name: Mount ESP partition
      ansible.posix.mount:
        path: /mnt/boot
        src: "{{ esp_part_file }}"
        state: ephemeral
        fstype: vfat
        opts: "{{ vfat_mount_opts }}"
      tags: [btrfs, mount]

    - name: Mount @home subvolume
      ansible.posix.mount:
        path: /mnt/home
        src: "{{ root_part_file }}"
        state: ephemeral
        fstype: btrfs
        opts: "{{ btrfs_mount_opts }},subvol=@home"
      tags: [btrfs, mount]

    - name: Mount @pkg subvolume
      ansible.posix.mount:
        path: /mnt/var/cache/pacman/pkg
        src: "{{ root_part_file }}"
        state: ephemeral
        fstype: btrfs
        opts: "{{ btrfs_mount_opts }},subvol=@pkg"
      tags: [btrfs, mount]

    - name: Mount @log subvolume
      ansible.posix.mount:
        path: /mnt/var/log
        src: "{{ root_part_file }}"
        state: ephemeral
        fstype: btrfs
        opts: "{{ btrfs_mount_opts }},subvol=@log"
      tags: [btrfs, mount]

    - name: Mount @snapshots subvolume
      ansible.posix.mount:
        path: /mnt/.snapshots
        src: "{{ root_part_file }}"
        state: ephemeral
        fstype: btrfs
        opts: "{{ btrfs_mount_opts }},subvol=@snapshots"
      tags: [btrfs, mount]

    - name: Create etc directory
      ansible.builtin.file:
        path: /mnt/etc
        state: directory
        mode: '0755'
      tags: fstab

    - name: Create fstab
      ansible.builtin.copy:
        dest: /mnt/etc/fstab
        content: |
          LABEL=EFI  /boot                 vfat  {{ vfat_mount_opts }}                    0 2

          LABEL=root /                     btrfs {{ btrfs_mount_opts }},subvol=@          0 0
          LABEL=root /home                 btrfs {{ btrfs_mount_opts }},subvol=@home      0 0
          LABEL=root /var/cache/pacman/pkg btrfs {{ btrfs_mount_opts }},subvol=@pkg       0 0
          LABEL=root /var/log              btrfs {{ btrfs_mount_opts }},subvol=@log       0 0
          LABEL=root /.snapshots           btrfs {{ btrfs_mount_opts }},subvol=@snapshots 0 0
        mode: '0644'
        validate: findmnt --verify --fstab --tab-file %s --target /mnt
      tags: fstab

    - name: Determine CPU microcode
      ansible.builtin.set_fact:
        cpu_microcode_package: >-
          {{ 'amd-ucode' if 'AMD' in ansible_facts['processor'][0] else
             'intel-ucode' if 'Intel' in ansible_facts['processor'][0] else None }}
      tags: pacstrap

    - name: Pacstrap base system
      ansible.builtin.command:
        cmd: "pacstrap -K /mnt base linux-zen linux-firmware btrfs-progs networkmanager python sudo {{ cpu_microcode_package }}"
      tags: pacstrap

    - name: Enable network service
      ansible.builtin.command:
        cmd: arch-chroot /mnt
        stdin: systemctl enable NetworkManager.service
      tags: network

    - name: Install and enable sshd service
      ansible.builtin.command:
        cmd: arch-chroot /mnt
        stdin: |
          pacman -S --noconfirm openssh
          systemctl enable sshd.service
      when: ansible_connection == "ssh"
      tags: network

    - name: Install boot manager
      ansible.builtin.command:
        cmd: arch-chroot /mnt
        stdin: bootctl install
      tags: bootctl

    - name: Create boot loader config
      ansible.builtin.copy:
        dest: /mnt/boot/loader/loader.conf
        content: |
          timeout 0
          console-mode keep
          editor no
          default arch-linux-zen.conf
        mode: '0755'
      tags: bootctl

    - name: Create boot loader entry
      ansible.builtin.copy:
        dest: /mnt/boot/loader/entries/arch-linux-zen.conf
        content: |
          title Arch Linux (linux-zen)
          linux /vmlinuz-linux-zen
          initrd /initramfs-linux-zen.img
          options root=LABEL=root rootflags=subvol=@ rw quiet
        mode: '0755'
      tags: bootctl

    - name: Create boot loader entry (fallback initramfs)
      ansible.builtin.copy:
        dest: /mnt/boot/loader/entries/arch-linux-zen-fallback.conf
        content: |
          title Arch Linux (linux-zen) fallback initramfs
          linux /vmlinuz-linux-zen
          initrd /initramfs-linux-zen-fallback.img
          options root=LABEL=root rootflags=subvol=@ rw quiet
        mode: '0755'
      tags: bootctl

    - name: Set timezone
      ansible.builtin.shell:
        cmd: arch-chroot /mnt
        stdin: "ln -sf /usr/share/zoneinfo/{{ timezone }} /etc/localtime"
      tags: timezone

    - name: Generate adjtime
      ansible.builtin.shell:
        cmd: arch-chroot /mnt
        stdin: hwclock --systohc
      tags: timezone

    - name: Add locales
      ansible.builtin.lineinfile:
        path: /mnt/etc/locale.gen
        regexp: "^#({{ item }})"
        line: '\1'
        backrefs: true
      loop: "{{ locales }}"
      tags: locale

    - name: Generate locales
      ansible.builtin.shell:
        cmd: arch-chroot /mnt
        stdin: locale-gen
      tags: locale

    - name: Set LANG variable
      ansible.builtin.copy:
        dest: /mnt/etc/locale.conf
        content: "LANG={{ (locales if locales is string else locales[0] | split(' '))[0] }}\n"
        mode: '0644'
      tags: locale

    - name: Set hostname
      ansible.builtin.copy:
        dest: /mnt/etc/hostname
        content: "{{ hostname }}\n"
        mode: '0644'
      tags: hostname

    - name: Create user {{ user }}
      ansible.builtin.shell:
        cmd: arch-chroot /mnt
        stdin: "useradd -m -G wheel {{ user }}"
      register: useradd_stdout
      failed_when: useradd_stdout.rc not in [0, 9] # rc 9 = already exists
      tags: user

    - name: Set password for user {{ user }}
      ansible.builtin.shell:
        cmd: arch-chroot /mnt
        stdin: 'echo "{{ user_password }}" | passwd {{ user }} --stdin'
      no_log: true
      tags: user

    - name: Allow wheel to use sudo
      ansible.builtin.lineinfile:
        path: /mnt/etc/sudoers
        regexp: '^#?\s*%wheel\s+ALL=\(ALL(:ALL)?\)\s+ALL'
        line: '%wheel ALL=(ALL:ALL) ALL'
        state: present
        validate: 'visudo -cf %s'
      tags: [root, superuser, sudo]

    - name: Change root password
      ansible.builtin.shell:
        cmd: arch-chroot /mnt
        stdin: 'echo "{{ root_password }}" | passwd root --stdin'
      no_log: true
      when: root_password is defined and root_password | length > 0
      tags: [root, superuser]

    - name: Lock superuser
      ansible.builtin.shell:
        cmd: arch-chroot /mnt
        stdin: passwd --lock root
      when: root_password is undefined or root_password | length == 0
      tags: [root, superuser]

    - ansible.builtin.reboot:
        msg: Host will reboot now
      failed_when: false
      when: reboot

    - ansible.builtin.debug:
        msg:
          - You may now reboot
          - Log in as {{ user }} to continue setup
      when: not reboot
